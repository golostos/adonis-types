// export = Logger;
import WinstonFile from './Drivers/File'
import WinstonConsole from './Drivers/Console'
type WinstonDriver = WinstonFile | WinstonConsole
import winston from 'winston'
export declare type TransportName = "file" | "console" | "loki" | "ap" | "task" | "lokiErrors"

export type Meta = {
    /** Message text */
    message: string
    /** Name of the file, class or module in which this log message is created */
    group: string
    /** Code of the log - can be a method name or a logical role */
    code: string
    /** request_id for the entire user request processing flow 
     * or a unique id for a large task or command */
    request_id?: string
    /** session_id from Autopayer FastAPI */
    session_id?: string
    /** Operation group name. The name of a large group of operations, 
     * such as a full stream of request handlers or commands that perform some task */
    opsGroupName?: string
    /** Name of the method or function in which the log is called */
    method?: string
    /** The url of request to WB or Autopayer FastAPI */
    url?: string
    /** Serialized error message */
    error?: any
    /** Any additional fields are allowed */
    [key: string]: any
}

interface LogMethod {
    (message: string, callback: winston.LogCallback): void;
    (message: string, meta: any, callback: winston.LogCallback): void;
    (message: string, ...meta: any[]): void;
    (message: string, meta: Meta): void;
    (meta: Meta): void;
}

/**
 * The logger class is used to record logs through-out the
 * application. The class instance is generated by the
 * @ref('LoggerFacade') class.
 *
 * @group Core
 *
 * @class Logger
 * @constructor
 */
declare class Logger {
    constructor(driver: WinstonDriver);
    /**
     * The driver in use for logging
     *
     * @type {Object}
     *
     * @attribute driver
     */
    driver: WinstonDriver;
    /**
     * Hash of log levels used by Logger
     * internally.
     *
     * @attribute levels
     *
     * @return {Object}
     */
    get levels(): Object;
    /**
     * Update log level for the logger driver
     *
     * @param  {String} level
     *
     * @return {void}
     */
    set level(arg: string);
    /**
     * The active log level for the logger driver.
     *
     * @attribute level
     *
     * @return {String}
     */
    get level(): string;
    /**
     * Log a new message with given level. The configured
     * driver will be used to log the messages.
     *
     * @method log
     *
     * @param  {String}    level
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    log(level: string, message: string, ...options: any[]): void;
    /**
     * Log a message with debug level.
     *
     * @method debug
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    debug: LogMethod;
    /**
     * Log a message with info level.
     *
     * @method info
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    info: LogMethod;
    /**
     * Log a message with notice level.
     *
     * @method notice
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    notice: LogMethod;
    /**
     * Log a message with warning level.
     *
     * @method warning
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    warning: LogMethod;
    /**
     * Log a message with error level.
     *
     * @method error
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    error: LogMethod;
    /**
     * Log a message with critical level.
     *
     * @method crit
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    crit: LogMethod;
    /**
     * Log a message with alert level.
     *
     * @method alert
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    alert: LogMethod;
    /**
     * Log a message with emergency level.
     *
     * @method emerg
     *
     * @param  {String}    message
     * @param  {...any} options
     *
     * @return {void}
     */
    emerg: LogMethod;
}
//# sourceMappingURL=index.d.ts.map
export default Logger