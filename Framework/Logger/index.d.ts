export = Logger;
/**
 * The logger class is used to record logs through-out the
 * application. The class instance is generated by the
 * @ref('LoggerFacade') class.
 *
 * @group Core
 *
 * @class Logger
 * @constructor
 */
declare class Logger {
    constructor(driver: any);
    /**
     * The driver in use for logging
     *
     * @type {Object}
     *
     * @attribute driver
     */
    driver: any;
    /**
     * Hash of log levels used by Logger
     * internally.
     *
     * @attribute levels
     *
     * @return {Object}
     */
    get levels(): any;
    /**
     * Update log level for the logger driver
     *
     * @param  {String} level
     *
     * @return {void}
     */
    set level(arg: string);
    /**
     * The active log level for the logger driver.
     *
     * @attribute level
     *
     * @return {String}
     */
    get level(): string;
    /**
     * Log a new message with given level. The configured
     * driver will be used to log the messages.
     *
     * @method log
     *
     * @param  {String}    level
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    log(level: string, message: string, ...options: Spread[]): void;
    /**
     * Log a message with debug level.
     *
     * @method debug
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    debug(message: string, ...options: Spread[]): void;
    /**
     * Log a message with info level.
     *
     * @method info
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    info(message: string, ...options: Spread[]): void;
    /**
     * Log a message with notice level.
     *
     * @method notice
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    notice(message: string, ...options: Spread[]): void;
    /**
     * Log a message with warning level.
     *
     * @method warning
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    warning(message: string, ...options: Spread[]): void;
    /**
     * Log a message with error level.
     *
     * @method error
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    error(message: string, ...options: Spread[]): void;
    /**
     * Log a message with critical level.
     *
     * @method crit
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    crit(message: string, ...options: Spread[]): void;
    /**
     * Log a message with alert level.
     *
     * @method alert
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    alert(message: string, ...options: Spread[]): void;
    /**
     * Log a message with emergency level.
     *
     * @method emerg
     *
     * @param  {String}    message
     * @param  {...Spread} options
     *
     * @return {void}
     */
    emerg(message: string, ...options: Spread[]): void;
}
//# sourceMappingURL=index.d.ts.map