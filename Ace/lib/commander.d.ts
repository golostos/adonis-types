declare const _exports: {
    [key: string]: any;
    args: string[];
    version(str: string, flags?: string): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    command(name: string, desc?: string, opts?: commander.CommandOptions): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    arguments(desc: string): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    parseExpectedArgs(args: string[]): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    action(fn: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    option(flags: string, description?: string, defaultValue?: any): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    allowUnknownOption(arg?: boolean): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    parse(argv: string[]): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    parseOptions(argv: string[]): commander.ParseOptionsResult;
    opts(): {
        [key: string]: any;
    };
    description(str: string, argsDescription?: {
        [argName: string]: string;
    }): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    description(): string;
    alias(alias: string): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    alias(): string;
    usage(str: string): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    usage(): string;
    name(str: string): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    name(): string;
    outputHelp(cb?: (str: string) => string): void;
    help(cb?: (str: string) => string): never;
    addListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    on(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    once(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    removeListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    off(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    removeAllListeners(event?: string | symbol): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    setMaxListeners(n: number): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    getMaxListeners(): number;
    listeners(eventName: string | symbol): Function[];
    rawListeners(eventName: string | symbol): Function[];
    emit(eventName: string | symbol, ...args: any[]): boolean;
    listenerCount(eventName: string | symbol): number;
    prependListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        [key: string]: any;
        args: string[];
        version(str: string, flags?: string): any;
        command(name: string, desc?: string, opts?: commander.CommandOptions): any;
        arguments(desc: string): any;
        parseExpectedArgs(args: string[]): any;
        action(fn: (...args: any[]) => void): any;
        option(flags: string, description?: string, fn?: RegExp | ((arg1: any, arg2: any) => void), defaultValue?: any): any;
        option(flags: string, description?: string, defaultValue?: any): any;
        allowUnknownOption(arg?: boolean): any;
        parse(argv: string[]): any;
        parseOptions(argv: string[]): commander.ParseOptionsResult;
        opts(): {
            [key: string]: any;
        };
        description(str: string, argsDescription?: {
            [argName: string]: string;
        }): any;
        description(): string;
        alias(alias: string): any;
        alias(): string;
        usage(str: string): any;
        usage(): string;
        name(str: string): any;
        name(): string;
        outputHelp(cb?: (str: string) => string): void;
        help(cb?: (str: string) => string): never;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    eventNames(): (string | symbol)[];
};
export = _exports;
import commander = require("commander");
export { Command, Option };
